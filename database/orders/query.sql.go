// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package orders

import (
	"context"
	"database/sql"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO
    orders (
        order_number,
        platform_id,
        creation_date,
        total_price,
        customer_name
    )
VALUES
    (?, ?, ?, ?, ?) RETURNING id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
`

type AddOrderParams struct {
	OrderNumber  int64   `json:"order_number"`
	PlatformID   string  `json:"platform_id"`
	CreationDate int64   `json:"creation_date"`
	TotalPrice   float64 `json:"total_price"`
	CustomerName string  `json:"customer_name"`
}

// CREATE TABLE orders (
//
//	id INTEGER PRIMARY KEY,
//	platform_id TEXT UNIQUE NOT NULL,
//	order_number INTEGER UNIQUE NOT NULL,
//	is_processed INTEGER DEFAULT 0 NOT NULL,
//	total_price REAL NOT NULL,
//	customer_name TEXT,
//	processed_date INTEGER,
//	creation_date INTEGER NOT NULL
//
// );
func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, addOrder,
		arg.OrderNumber,
		arg.PlatformID,
		arg.CreationDate,
		arg.TotalPrice,
		arg.CustomerName,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.PlatformID,
		&i.OrderNumber,
		&i.IsProcessed,
		&i.TotalPrice,
		&i.CustomerName,
		&i.ProcessedDate,
		&i.CreationDate,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM orders
WHERE
    id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT
    id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
FROM
    orders
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.PlatformID,
			&i.OrderNumber,
			&i.IsProcessed,
			&i.TotalPrice,
			&i.CustomerName,
			&i.ProcessedDate,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrdersDescDate = `-- name: GetAllOrdersDescDate :many
SELECT
    id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
FROM
    orders
ORDER BY
    creation_date DESC
`

func (q *Queries) GetAllOrdersDescDate(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrdersDescDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.PlatformID,
			&i.OrderNumber,
			&i.IsProcessed,
			&i.TotalPrice,
			&i.CustomerName,
			&i.ProcessedDate,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT
    id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
FROM
    orders
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.PlatformID,
		&i.OrderNumber,
		&i.IsProcessed,
		&i.TotalPrice,
		&i.CustomerName,
		&i.ProcessedDate,
		&i.CreationDate,
	)
	return i, err
}

const getProcessedOrders = `-- name: GetProcessedOrders :many
SELECT
    id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
FROM
    orders
WHERE
    is_processed = 1
ORDER BY
    creation_date DESC
`

// sorting latest
func (q *Queries) GetProcessedOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getProcessedOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.PlatformID,
			&i.OrderNumber,
			&i.IsProcessed,
			&i.TotalPrice,
			&i.CustomerName,
			&i.ProcessedDate,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnProcessedOrders = `-- name: GetUnProcessedOrders :many
SELECT
    id, platform_id, order_number, is_processed, total_price, customer_name, processed_date, creation_date
FROM
    orders
WHERE
    is_processed = 0
ORDER BY
    creation_date ASC
`

// sorting oldest
func (q *Queries) GetUnProcessedOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getUnProcessedOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.PlatformID,
			&i.OrderNumber,
			&i.IsProcessed,
			&i.TotalPrice,
			&i.CustomerName,
			&i.ProcessedDate,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const processOrder = `-- name: ProcessOrder :one
UPDATE orders
SET
    is_processed = 1,
    processed_date = ?
WHERE
    platform_id = ? RETURNING is_processed
`

type ProcessOrderParams struct {
	ProcessedDate sql.NullInt64 `json:"processed_date"`
	PlatformID    string        `json:"platform_id"`
}

func (q *Queries) ProcessOrder(ctx context.Context, arg ProcessOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, processOrder, arg.ProcessedDate, arg.PlatformID)
	var is_processed int64
	err := row.Scan(&is_processed)
	return is_processed, err
}

const unProcessOrder = `-- name: UnProcessOrder :one
UPDATE orders
SET
    is_processed = 0,
    processed_date = 0
WHERE
    platform_id = ? RETURNING is_processed
`

func (q *Queries) UnProcessOrder(ctx context.Context, platformID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, unProcessOrder, platformID)
	var is_processed int64
	err := row.Scan(&is_processed)
	return is_processed, err
}
